labels = c("Percent Delta","% Change in Total Cases" ))
plot <- ggplotly(plot, tooltip = "text") #%>% layout(hovermode = 'x')
return(plot)
}
make_case_delta("GA")
make_case_delta <- function(xx) {
state_df <- df %>% filter(state == xx) %>%
select(time_interval, tot_case_pct_change, PC_DELTA) %>%
gather(key = "variable", value = "value", -time_interval)
plot <- ggplot(state_df, aes(x = time_interval,
y = value,
group = variable,
text = paste(round(value, digits = 0 ), "%"))) +
geom_line(aes(color = variable)) +
geom_point(aes(color = variable)) +
xlab("2 Wk Interval Start Date") +
ylab("Percentage") +
scale_color_discrete(name = "",
labels = c("Percent Delta","% Change in Total Cases" )) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
plot <- ggplotly(plot, tooltip = "text") %>% layout(hovermode = 'x')
return(plot)
}
make_case_delta("GA")
View(df)
df3 <- df %>% filter(tot_case_pct_change >= p5)
View(df3)
df3 <- df %>% filter(tot_case_pct_change >= p5) %>%
arrange(state) %>%
select(time_interval,state,tot_case_pct_change)
ds <- knitr::kable(x = df3, format = "html") %>%
kable_paper("hover", full_width = T)
library(dplyr)
library(lubridate)
library(ggplot2)
library(plotly)
library(tidyr)
library(kableExtra)
shiny::runApp('Emory/MyProjects')
runApp('Emory/MyProjects')
runApp('Emory/MyProjects')
runApp('Emory/MyProjects')
rsconnect::deployApp('C:/Users/user/Documents/Emory/MyProjects')
here::i_am('Section2.Rmd')
knitr::opts_knit$set(root.dir=here::here())
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
m_data <- c(1,2,3,4,5,6,1,1,0,1,0,0,1,1,1,0,0,1,"x","x","x","x","x","x","x","x","x","x","x","x")
m <- matrix(m_data,nrow=6,ncol=5,byrow=FALSE)
colnames(m) <- c("ID","Exposure (A)","Outcome (Y)", "Y(a=1)", "Y(a=0)")
m_df <- as.data.frame(m)
t <- kable(m_df, format = "latex", booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
here::i_am('Section2.Rmd')
knitr::opts_knit$set(root.dir=here::here())
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
library(dplyr)
#library(ggplot2)
#library(ggpubr)
#library(table1)
#library(flextable)
#library(webshot)
# webshot::install_phantomjs()
library(knitr)
library(kableExtra)
#library(survival)
#library(cmprsk)
m_data <- c(1,2,3,4,5,6,1,1,0,1,0,0,1,1,1,0,0,1,"x","x","x","x","x","x","x","x","x","x","x","x")
m <- matrix(m_data,nrow=6,ncol=5,byrow=FALSE)
colnames(m) <- c("ID","Exposure (A)","Outcome (Y)", "Y(a=1)", "Y(a=0)")
m_df <- as.data.frame(m)
t <- kable(m_df, format = "latex", booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
t
t
here::i_am('Section2.Rmd')
knitr::opts_knit$set(root.dir=here::here())
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
m_data <- c(1,2,3,4,5,6,1,1,0,1,0,0,1,1,1,0,0,1,"1","1","x","0","?","?","?","?","1","?","0","1")
m <- matrix(m_data,nrow=6,ncol=5,byrow=FALSE)
colnames(m) <- c("ID","Exposure (A)","Outcome (Y)", "Y(a=1)", "Y(a=0)")
m_df <- as.data.frame(m)
t <- kable(m_df, format = "latex", booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
here::i_am('Section2.Rmd')
knitr::opts_knit$set(root.dir=here::here())
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
library(dplyr)
#library(ggplot2)
#library(ggpubr)
#library(table1)
#library(flextable)
#library(webshot)
# webshot::install_phantomjs()
library(knitr)
library(kableExtra)
#library(survival)
#library(cmprsk)
remotes::install_github("yqzhong7/AIPW")
# remotes::install_github("yqzhong7/AIPW")
library(AIPW)
Q13_data <- data("eager_sim_obs")
q13_data <- data("eager_sim_obs")
q13_data <- data(eager_sim_obs)
data(eager_sim_obs)
data(eager_sim_obs)
?data()
# remotes::install_github("yqzhong7/AIPW")
install.packages("SuperLearner")
library(SuperLearner)
data(eager_sim_obs)
q13_data <- data(eager_sim_obs)
data("eager_sim_obs")
cov = c("eligibility","loss_num","age", "time_try_pregnant","BMI","meanAP")
eager_sim_obs
my_data <- eager_sim_obs
my_data
my_data <- as.data.frame(eager_sim_obs)
View(my_data)
ps <- glm(sim_A ~ eligibility + loss_num + age + time_try_pregnant + BMI + meanAP, data = my_data, family = binomial(link = "logit"))$fitted.values
library(ggplot2)
exposure <- my_data$sim_A
plot_data <- data.frame(ps, Exposure = as.factor(my_data$sim_A))
p1 <- ggplot(data = plot_data) + scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) + ylab("Density") +
xlab("Propensity Score") +
scale_color_manual(values = c("#000000","#D55E00")) +
geom_density(aes(x = propensity_score, group = Exposure, color = Exposure)) + xlim(0,1)
p1
p1 <- ggplot(data = plot_data) + scale_y_continuous(expand = c(0,0)) +
scale_x_continuous(expand = c(0,0)) + ylab("Density") +
xlab("Propensity Score") +
scale_color_manual(values = c("#000000","#D55E00")) +
geom_density(aes(x = ps, group = Exposure, color = Exposure)) + xlim(0,1)
p1
ps(1:20)
ps[1:20]
high5 <- tail(sort(ps),5)
low5 <- head(sort(ps),5)
highT <- kable(high5, format = "latex", booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
highT
high5 <- sort(tail(sort(ps),5),decreasing = TRUE)
?round()
sw <- (mean(exposure)/ps)* exposure + ((1-mean(exposure))/(1-ps))*(1-exposure)
sw <- (mean(exposure)/ps)* exposure + ((1-mean(exposure))/(1-ps))*(1-exposure)
summary(sw)
s_sw <-summary(sw)
summary_t <- kable(s_sw, format = "latex", booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
s_sw <-data.frame(summary(sw))
s_sw <-data.frame(unclass(summary(sw)), check.names = FALSE, stringsAsFactors = FALSE)
View(s_sw)
colncames(s_sw) <- c("")
colnames(s_sw) <- c("")
View(s_sw)
s_sw <- round(s_sw,3)
View(s_sw)
library(dplyr)
library(lubridate)
##### LOAD DATA #####
here::i_am('R/05_add_vacc.R')
setwd("F:/Thesis/R")
##### LOAD DATA #####
here::i_am('R/05_add_vacc.R')
vaccine_data <- fread(here::here("Raw_Data","COVID-19_Vaccinations_in_the_United_States_Jurisdiction.csv"),
select = c("Date","Location","Series_Complete_5PlusPop_Pct"))
library(dplyr)
library(data.table)
library(lubridate)
##### LOAD DATA #####
here::i_am('R/05_add_vacc.R')
vaccine_data <- fread(here::here("Raw_Data","COVID-19_Vaccinations_in_the_United_States_Jurisdiction.csv"),
select = c("Date","Location","Series_Complete_5PlusPop_Pct"))
View(vaccine_data)
vacc_prep <- vaccine_data %>%
filter(Location %in% state_list) %>%
mutate(Date = mdy(Date)) %>%
filter(Date >= as.Date(min_date) & Date <= as.Date(max_date)
vacc_prep <- vaccine_data %>%
filter(Location %in% state_list) %>%
mutate(Date = mdy(Date)) %>%
filter(Date >= as.Date(min_date) & Date <= as.Date(max_date))
min_date = "2021-05-03"
max_date = "2021-10-31"
vacc_prep <- vaccine_data %>%
filter(Location %in% state_list) %>%
mutate(Date = mdy(Date)) %>%
filter(Date >= as.Date(min_date) & Date <= as.Date(max_date))
case_cc <- readRDS(here::here("Processed_Data", "04_case_cc.rds"))
##### PREP VACCINE DATA #####
state_list <- unique(case_cc$state)
vacc_prep <- vaccine_data %>%
filter(Location %in% state_list) %>%
mutate(Date = mdy(Date)) %>%
filter(Date >= as.Date(min_date) & Date <= as.Date(max_date))
View(vacc_prep)
library(dplyr)
library(data.table)
library(lubridate)
here::i_am('R/05_add_vacc.R')
vaccine_data <- fread(here::here("Raw_Data","COVID-19_Vaccinations_in_the_United_States_Jurisdiction.csv"),
select = c("Date","Location","Series_Complete_5PlusPop_Pct"))
case_cc <- readRDS(here::here("Processed_Data", "04_case_cc.rds"))
min_date = "2021-05-03"
max_date = "2021-10-31"
time_cuts <- seq(ymd(min_date),ymd(max_date) + 13, by = '2 week')
state_list <- unique(case_cc$state)
vacc_prep <- vaccine_data %>%
filter(Location %in% state_list) %>%
mutate(Date = mdy(Date)) %>%
filter(Date >= as.Date(min_date) & Date <= as.Date(max_date))
library(dplyr)
library(data.table)
library(lubridate)
here::i_am('R/05_add_vacc.R')
vaccine_data <- fread(here::here("Raw_Data","COVID-19_Vaccinations_in_the_United_States_Jurisdiction.csv"),
select = c("Date","Location","Series_Complete_Pop_Pct"))
case_cc <- readRDS(here::here("Processed_Data", "04_case_cc.rds"))
min_date = "2021-05-03"
max_date = "2021-10-31"
time_cuts <- seq(ymd(min_date),ymd(max_date) + 13, by = '2 week')
state_list <- unique(case_cc$state)
vacc_prep <- vaccine_data %>%
filter(Location %in% state_list) %>%
mutate(Date = mdy(Date)) %>%
filter(Date >= as.Date(min_date) & Date <= as.Date(max_date))%>%
mutate(time_interval = cut(Date, breaks = time_cuts,
include.lowest = FALSE,
right = FALSE))
View(vacc_prep)
##### GET AVG % OF 5+ POP VACCINATED PER TIME INTERVAL FOR EACH STATE #####
avg_vac <- vacc_prep %>%
group_by(Location, time_interval) %>%
summarise(avg_pct_vacc_pct = mean(Series_Complete_Pop_Pct)) %>%
ungroup() %>%
rename(state = Location) %>%
arrange(state, time_interval)
View(avg_vac)
##### ADD TO DATASET #####
case_cc_vacc <- merge(case_cc,avg_vac, by=c("time_interval","state"), all=T) %>%
arrange(state,month_dist_used)
##### EXPORT DATASET #####
saveRDS(case_cc_vacc, here::here("Processed_Data", "05_case_cc_vacc.rds"))
library(dplyr)
library(lubridate)
library(data.table)
##### LOAD DATA #####
here::i_am('R/06_calc_perc_change.R')
case_vacc <- readRDS(here::here("Processed_Data", "05_case_cc_vacc.rds"))
state_pops_df <- fread(here::here("Raw_Data","state_pop.csv"))
##### ADD POP AND CALC CASE INCIDENCE RATE PER 100K #####
state_pop_all <- state_pops_df %>%
mutate(state_pop = POP_EST_JUL_21) %>%
mutate (state = State) %>%
select(-State) %>%
select(state, state_pop)
case_vacc_ci <- merge(case_vacc,state_pop_all, by="state", all=T) %>%
mutate(incidence_per_100k = (case_tot/state_pop)*100000)
##### CALC % CHANGE IN CASE INCIDENCE RATE AND CASE COUNTS #####
case_perc <- case_vacc_ci %>%
arrange(state,time_interval) %>%
group_by(state) %>%
mutate(count_lag = lag(case_tot)) %>%
mutate(ci_lag = lag(incidence_per_100k)) %>%
mutate(case_count_pct_change = ((case_tot-count_lag)/count_lag)*100) %>%
mutate(incidence_pct_change = ((incidence_per_100k-ci_lag)/ci_lag)*100) %>%
ungroup() %>%
select(-c(count_lag,ci_lag))
##### EXPORT DATASET #####
saveRDS(case_perc, here::here("Processed_Data", "06_case_vacc_pct.rds"))
library(dplyr)
library(lubridate)
library(data.table)
##### LOAD DATA #####
here::i_am('R/07_add_var_prop.R')
case_perc <- readRDS(here::here("Processed_Data", "06_case_vacc_pct.rds"))
var_prop_data <- fread(here::here("Raw_Data","state_variant2.csv"))
just_prop <- var_prop_data %>%
mutate(time_interval = as.factor(ymd(WEEK_START))) %>%
rename(state = STATE) %>%
rename(pct_delta = PC_DELTA) %>%
select(-c(NUM_SEQ,WEEK_START))
data_cleaned <- merge(case_perc,just_prop, by=c("time_interval","state"), all=F) %>%
arrange(state,month_dist_used)
##### EXPORT DATASET #####
saveRDS(data_cleaned, here::here("Processed_Data", "07_var_added.rds"))
library(dplyr)
library(lubridate)
library(data.table)
##### LOAD DATA #####
here::i_am('R/08_add_indicators.R')
ds <- readRDS(here::here("Processed_Data", "07_var_added.rds"))
df <- ds %>% filter(age_group == "0 - 17 years") %>%
filter(!(is.na(incidence_pct_change))) %>%
group_by(state) %>%
mutate(peak_indicator = if_else(incidence_pct_change == max(incidence_pct_change),1,0)) %>%
mutate(pos_indicator = if_else(sign(incidence_pct_change) == -1, 0, 1)) %>%
mutate(pos_lag = lag(pos_indicator)) %>%
mutate(switches_indicator = if_else(pos_indicator-pos_lag == 1,1,0)) %>%
ungroup()
first_switch_indicator <- ave(df$switches_indicator, df$state,
FUN = function(x) seq_along(x) == match(1, x, nomatch = 0))
df$first_switch_indicator <- first_switch_indicator
df$first_switch_indicator <- ifelse(is.na(df$switches_indicator),NA,
df$first_switch_indicator)
df <- df %>%
select(c(time_interval,state,peak_indicator,switches_indicator,first_switch_indicator))
merged_df <- merge(ds,df, by=c("time_interval","state"), all=T) %>%
arrange(state,month_dist_used)
##### EXPORT DATASET #####
saveRDS(merged_df, here::here("Processed_Data", "08_indicator_added.rds"))
library(dplyr)
library(tidyr)
library(lubridate)
library(data.table)
library(naniar)
here::i_am('R/09_add_sero.R')
ds <- readRDS(here::here("Processed_Data", "08_indicator_added.rds"))
sero_dat <- fread(here::here("Raw_Data","Nationwide__Blood_Donor_Seroprevalence_Survey_Infection-Induced_Seroprevalence_Estimates.csv"),
select = c("Region","Region Abbreviation","Year and Month",
"Median
Donation Date","n [Total Prevalence]","Rate %[Total Prevalence]"))
sero_dat <- sero_dat %>% rename("region_abrv" = "Region Abbreviation",
"y_m" = "Year and Month",
"med_don_date"  = "Median
Donation Date",
"n_sero_prevalence" = "n [Total Prevalence]",
"pop_sero_rate_16p" = "Rate %[Total Prevalence]") %>%
filter(y_m >= min(ds$month_dist_used) & y_m <= max(ds$month_dist_used)) %>%
filter(!(region_abrv %in% c("CR1","CR2","CR3","CR4","All")))
multi_sero_states <- c("AZ","CA","FL","IL","KS","KY","MD","MO","NV","NJ","NM","NY",
"OH","OR","PA","TN","TX","VA","WA","DC")
single_sero_state_df <- sero_dat %>% filter((nchar(region_abrv, type = "chars") == 2)
& !(region_abrv %in% multi_sero_states)) %>%
select(-c(Region, med_don_date))
multi_sero_dict <- list(
"AZ" = c("AZ-1","AZ-2","NV-2"),
"CA" = c("CA-1","CA-2","CA-3"),
"FL" = c("FL-1","FL-2"),
"IL" = c("IL-1","IL-2"),
"KS" = c("KS-1","KS-2"),
"KY" = c("IL-2","KY"),
"MD" = c("DE","MD","WV"),
"MO" = c("AR","IL-2","KS-2","MO"),
"NV" = c("NV-1","NV-2"),
"NJ" = c("NJ","NY-1"),
"NM" = c("NM-1","NM-2"),
"NY" = c("NY-1","NY-2","NY-3"),
"OH" = c("OH-1","OH-2"),
"OR" = c("OR-1","OR-2"),
"PA" = c("NJ","PA"),
"TN" = c("TN-1","TN-2"),
"TX" = c("NM-2","TX-1","TX-2"),
"VA" = c("VA","WV"),
"WA" = c("OR-1","WA-1","WA-2"),
"DC" = c("MD"))
i <- 0
calc_sds <- lapply(multi_sero_dict, function(x) {
i <<- i+1
state_ds <-sero_dat %>% filter(region_abrv %in% x)%>%
select (-c(Region,med_don_date)) %>%
group_by(y_m) %>%
summarise(n_sero_prevalence = sum(n_sero_prevalence),
pop_sero_rate_16p = max(pop_sero_rate_16p))
state_ds$region_abrv <- multi_sero_states[i]
return(state_ds)
})
multi_region_df <- data.table::rbindlist(calc_sds)
all_states <- rbind(single_sero_state_df,
multi_region_df, fill = TRUE)
all_states <- all_states %>% rename(month_dist_used = y_m,
state = region_abrv)
all_data <- merge(ds, all_states, by=c("state","month_dist_used"), all=F)
no_repeats <- all_data %>% filter(age_group == "0 - 17 years")
long2wide_age <- all_data %>% select(state, time_interval, age_group, prop) %>%
pivot_wider(names_from = age_group, values_from = prop) %>%
arrange(state,time_interval)
new_col_names <- c("case_prop_0_17", "case_prop_18_49",
"case_prop_50_64", "case_prop_65p")
colnames(long2wide_age)[3:6]<-new_col_names
all_data_cleaned <- merge(no_repeats, long2wide_age,  by=c("state","time_interval")) %>%
select(state, time_interval, avg_pct_vacc_5plus,
incidence_pct_change, pct_delta, peak_indicator,
switches_indicator, first_switch_indicator,
pop_sero_rate_16p, case_prop_0_17,
case_prop_18_49,
case_prop_50_64, case_prop_65p)
saveRDS(multi_region_df, here::here("Processed_Data", "09_multi_region_df.rds"))
saveRDS(all_data_cleaned, here::here("Processed_Data", "09_prepped_data.rds"))
View(all_data)
library(dplyr)
library(tidyr)
library(lubridate)
library(data.table)
library(naniar)
here::i_am('R/09_add_sero.R')
ds <- readRDS(here::here("Processed_Data", "08_indicator_added.rds"))
sero_dat <- fread(here::here("Raw_Data","Nationwide__Blood_Donor_Seroprevalence_Survey_Infection-Induced_Seroprevalence_Estimates.csv"),
select = c("Region","Region Abbreviation","Year and Month",
"Median
Donation Date","n [Total Prevalence]","Rate %[Total Prevalence]"))
sero_dat <- sero_dat %>% rename("region_abrv" = "Region Abbreviation",
"y_m" = "Year and Month",
"med_don_date"  = "Median
Donation Date",
"n_sero_prevalence" = "n [Total Prevalence]",
"pop_sero_rate_16p" = "Rate %[Total Prevalence]") %>%
filter(y_m >= min(ds$month_dist_used) & y_m <= max(ds$month_dist_used)) %>%
filter(!(region_abrv %in% c("CR1","CR2","CR3","CR4","All")))
multi_sero_states <- c("AZ","CA","FL","IL","KS","KY","MD","MO","NV","NJ","NM","NY",
"OH","OR","PA","TN","TX","VA","WA","DC")
single_sero_state_df <- sero_dat %>% filter((nchar(region_abrv, type = "chars") == 2)
& !(region_abrv %in% multi_sero_states)) %>%
select(-c(Region, med_don_date))
multi_sero_dict <- list(
"AZ" = c("AZ-1","AZ-2","NV-2"),
"CA" = c("CA-1","CA-2","CA-3"),
"FL" = c("FL-1","FL-2"),
"IL" = c("IL-1","IL-2"),
"KS" = c("KS-1","KS-2"),
"KY" = c("IL-2","KY"),
"MD" = c("DE","MD","WV"),
"MO" = c("AR","IL-2","KS-2","MO"),
"NV" = c("NV-1","NV-2"),
"NJ" = c("NJ","NY-1"),
"NM" = c("NM-1","NM-2"),
"NY" = c("NY-1","NY-2","NY-3"),
"OH" = c("OH-1","OH-2"),
"OR" = c("OR-1","OR-2"),
"PA" = c("NJ","PA"),
"TN" = c("TN-1","TN-2"),
"TX" = c("NM-2","TX-1","TX-2"),
"VA" = c("VA","WV"),
"WA" = c("OR-1","WA-1","WA-2"),
"DC" = c("MD"))
i <- 0
calc_sds <- lapply(multi_sero_dict, function(x) {
i <<- i+1
state_ds <-sero_dat %>% filter(region_abrv %in% x)%>%
select (-c(Region,med_don_date)) %>%
group_by(y_m) %>%
summarise(n_sero_prevalence = sum(n_sero_prevalence),
pop_sero_rate_16p = max(pop_sero_rate_16p))
state_ds$region_abrv <- multi_sero_states[i]
return(state_ds)
})
multi_region_df <- data.table::rbindlist(calc_sds)
all_states <- rbind(single_sero_state_df,
multi_region_df, fill = TRUE)
all_states <- all_states %>% rename(month_dist_used = y_m,
state = region_abrv)
all_data <- merge(ds, all_states, by=c("state","month_dist_used"), all=F)
no_repeats <- all_data %>% filter(age_group == "0 - 17 years")
long2wide_age <- all_data %>% select(state, time_interval, age_group, prop) %>%
pivot_wider(names_from = age_group, values_from = prop) %>%
arrange(state,time_interval)
new_col_names <- c("case_prop_0_17", "case_prop_18_49",
"case_prop_50_64", "case_prop_65p")
colnames(long2wide_age)[3:6]<-new_col_names
all_data_cleaned <- merge(no_repeats, long2wide_age,  by=c("state","time_interval")) %>%
select(state, time_interval, avg_pct_vacc_pct,
incidence_pct_change, pct_delta, peak_indicator,
switches_indicator, first_switch_indicator,
pop_sero_rate_16p, case_prop_0_17,
case_prop_18_49,
case_prop_50_64, case_prop_65p)
saveRDS(multi_region_df, here::here("Processed_Data", "09_multi_region_df.rds"))
saveRDS(all_data_cleaned, here::here("Processed_Data", "09_prepped_data.rds"))
library("geepack")
library("tidyr")
library("caret")
here::i_am('R/10_run_model.R')
ds <- readRDS(here::here("Processed_Data", "09_prepped_data.rds"))
ds$state_id <- as.numeric(factor(ds$state))
ds_peak <- ds %>% drop_na(peak_indicator)
ds_switches <- ds %>% drop_na(switches_indicator)
ds_first <- ds %>% drop_na(first_switch_indicator)
# model formulas  (case_prop_18_49 used as ref)
mf_first_switch <- formula(first_switch_indicator ~ pct_delta + pop_sero_rate_16p +
avg_pct_vacc_pct + case_prop_0_17 + case_prop_50_64 +
case_prop_65p)
mf_switches <- formula(switches_indicator ~ pct_delta + pop_sero_rate_16p +
avg_pct_vacc_pct + case_prop_0_17 + case_prop_50_64 +
case_prop_65p)
mf_peak <- formula(peak_indicator ~ pct_delta + pop_sero_rate_16p +
avg_pct_vacc_pct + case_prop_0_17 + case_prop_50_64 +
case_prop_65p)
m1 <- as.matrix(ds_first[,5:13])
colnames (m1) <- NULL
lc <- findLinearCombos(m1)
lc
# run models
geeAr1_first <- geeglm(mf_first_switch,
id=state_id,
data=ds_first,
family=binomial,
corstr="ar1")
summary(geeAr1_first)
summary(geeAr1_first)
summary(geeAr1_switches)
geeAr1_switches <- geeglm(mf_switches,
id=state_id,
data=ds_switches,
family=binomial,
corstr="ar1")
summary(geeAr1_switches)
geeAr1_peak <- geeglm(mf_peak,
id=state_id,
data=ds_peak,
family=binomial,
corstr="ar1")
summary(geeAr1_peak)
